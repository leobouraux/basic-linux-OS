unixv6fs.h:
19d18
<  * @author original UNIX v6 team + Mendel Rosenblum (Stanford) + Edouard Bugnion
202,204c201,209
<     /* TODO WEEK 04:
<      * la première chose à faire est de définir cette structure.
<      */
---
>     uint16_t i_mode;						/* few informations on inode : valid or not, repertory or file... */
>     uint8_t i_nlink;						/* NON USED */
>     uint8_t i_uid;							/* identifier of the file owner - NON USED */
>     uint8_t i_gid;							/* identifier of the file group - NON USED */
>     uint8_t i_size0;						/* 8 LSB of the file size */
>     uint16_t i_size1;						/* 16 MSB of the file size */
>     uint16_t i_addr[ADDR_SMALL_LENGTH];		/* store sector number where file datas are */
>     uint16_t i_atime[2];					/* store the date of the last file access - NON USED */
>     uint16_t i_mtime[2];					/* store the date of the last file modification - NON USED */


mount.h:
7d6
<  * @author Edouard Bugnion
46a46,48
> /*
>  * staff only; students will not have to implement
>  */


error.h:
7d6
<  * @author Edouard Bugnion
32c31
<     ERR_FILENAME_ALREADY_EXISTS,
---
>     ERR_FILENAME_ALREADY_EXISTS,   //-120


inode.h:
7d6
<  * @author Edouard Bugnion
90c89
<  * @return >0: the sector on disk;  <0 error
---
>  * @return >0: the sector on disk;  0: unallocated;  <0 error
108c107
< int inode_write(struct unix_filesystem *u, uint16_t inr, const struct inode *inode);
---
> int inode_write(struct unix_filesystem *u, uint16_t inr, struct inode *inode);


sha.h:
7d6
<  * @author Aurélien Soccard
28c27
<  * @param inode the inode of which we want to print the content
---
>  * @param inode the inocde of which we want to print the content


test-core.c:
5d4
<  * @author Aurélien Soccard & Jean-Cédric Chappelier


filev6.h:
7d6
<  * @author Edouard Bugnion
26c25
<  * @brief open the file corresponding to a given inode; set offset to zero
---
>  * @brief open up a file corresponding to a given inode; set offset to zero
28c27
<  * @param inr the inode number (IN)
---
>  * @param inr he inode number (IN)
30c29
<  * @return 0 on success; the appropriate error code (<0) on error
---
>  * @return 0 on success; <0 on errror
46,47c45
<  * @return >0: the number of bytes of the file read; 0: end of file;
<  *             the appropriate error code (<0) on error
---
>  * @return >0: the number of bytes of the file read; 0: end of file; <0 error
54c52
<  * @param mode the mode of the file
---
>  * @param mode the new offset of the file
68c66
< int filev6_writebytes(struct unix_filesystem *u, struct filev6 *fv6, const void *buf, int len);
---
> int filev6_writebytes(struct unix_filesystem *u, struct filev6 *fv6, void *buf, int len);


sector.h:
7d6
<  * @author Edouard Bugnion
31c30
<  * @brief write one 512-byte sector from the virtual disk
---
>  * @brief read one 512-byte sector from the virtual disk


direntv6.h:
7d6
<  * @author Edouard Bugnion
21,24c20,23
<     /* TODO WEEK 06:
<      * définir cette structure.
<      */
<     int unused; // so that it can compile before WEEK 6
---
>     struct filev6 fv6;
>     struct direntv6 dirs[DIRENTRIES_PER_SECTOR];
>     int cur;
>     int last;
38c37
<  * @param d the directory reader
---
>  * @param d the dierctory reader
46c45
<  * @brief debugging routine; print a subtree (note: recursive)
---
>  * @brief debugging routine; print the a subtree (note: recursive)
57,58c56,57
<  * @param inr the root of the subtree
<  * @param entry the pathname relative to the subtree
---
>  * @param inr the current of the subtree
>  * @param entry the prefix to the subtree


bmblock.h:
7d6
<  * @author Edouard Bugnion
11d9
< #include <stddef.h> // for size_t
12a11
> #include <stdio.h>
19c18,22
<     int unused; // so that it can compile before WEEK 9
---
>     size_t length;
>     uint64_t cursor;
>     uint64_t min;
>     uint64_t max;
>     uint64_t bm[1];
26c29
<  * between min and max (included, thus (max-min+1) elements).
---
>  * between min and may (included, thus (max-min+1) elements).

